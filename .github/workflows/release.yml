name: Release Workflow

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::set-output name=version::${{ github.event.inputs.version }}"
            echo "::set-output name=prerelease::${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            echo "::set-output name=version::${VERSION}"
            if [[ "$VERSION" == *"-alpha"* || "$VERSION" == *"-beta"* || "$VERSION" == *"-rc"* ]]; then
              echo "::set-output name=prerelease::true"
            else
              echo "::set-output name=prerelease::false"
            fi
          fi
      
      - name: Build application
        run: npm run build
      
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release archive
        run: |
          zip -r release-${{ steps.version.outputs.version }}.zip dist/
          tar -czf release-${{ steps.version.outputs.version }}.tar.gz dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            release-${{ steps.version.outputs.version }}.zip
            release-${{ steps.version.outputs.version }}.tar.gz
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: ./artifacts
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::set-output name=version::${{ github.event.inputs.version }}"
            echo "::set-output name=prerelease::${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            echo "::set-output name=version::${VERSION}"
            if [[ "$VERSION" == *"-alpha"* || "$VERSION" == *"-beta"* || "$VERSION" == *"-rc"* ]]; then
              echo "::set-output name=prerelease::true"
            else
              echo "::set-output name=prerelease::false"
            fi
          fi
      
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare release notes
        id: release_notes
        run: |
          if [[ -n "${{ github.event.inputs.release-notes }}" ]]; then
            echo "Using custom release notes"
            echo "${{ github.event.inputs.release-notes }}" > RELEASE_NOTES.md
          else
            echo "Using auto-generated changelog"
            echo "# Release ${{ needs.validate-release.outputs.version }}" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "## What's Changed" >> RELEASE_NOTES.md
            echo "${{ needs.prepare-release.outputs.changelog }}" >> RELEASE_NOTES.md
          fi
          
          echo "## Installation" >> RELEASE_NOTES.md
          echo "Download the appropriate package for your platform and follow the installation instructions." >> RELEASE_NOTES.md
          
          echo "## SHA256 Checksums" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          cat ./artifacts/SHA256SUMS.txt >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          
          cat RELEASE_NOTES.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.prerelease == 'true' }}
          files: |
            ./artifacts/release-${{ needs.validate-release.outputs.version }}.zip
            ./artifacts/release-${{ needs.validate-release.outputs.version }}.tar.gz
            ./artifacts/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-release:
    name: Deploy Release
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: ./artifacts
      
      - name: Setup deployment environment
        run: |
          echo "Setting up deployment environment for release ${{ needs.validate-release.outputs.version }}"
          # Add environment-specific setup commands here
      
      - name: Deploy to CDN
        id: deploy
        run: |
          echo "Deploying release ${{ needs.validate-release.outputs.version }} to CDN..."
          # Add commands to deploy to your CDN or hosting service
          # Example: aws s3 cp ./artifacts/ s3://releases-bucket/${{ needs.validate-release.outputs.version }}/ --recursive
          echo "deployment-url=https://releases.example.com/${{ needs.validate-release.outputs.version }}/" >> $GITHUB_OUTPUT
        env:
          # Use GitHub secrets for sensitive information
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          # Add verification commands here
          curl -sSf ${{ steps.deploy.outputs.deployment-url }} > /dev/null || (echo "Deployment verification failed" && exit 1)
        continue-on-error: true
      
      - name: Update documentation
        run: |
          echo "Updating documentation for release ${{ needs.validate-release.outputs.version }}..."
          # Add commands to update documentation with new version
        continue-on-error: true
      
      - name: Notify team
        uses: ./.github/actions/notify
        with:
          status: success
          message: "Release ${{ needs.validate-release.outputs.version }} has been deployed successfully"
          environment: production
        env:
          NOTIFICATION_TOKEN: ${{ secrets.NOTIFICATION_TOKEN }}
      
      - name: Generate release summary
        run: |
          echo "# Release Deployment Summary" > release-summary.md
          echo "- Version: ${{ needs.validate-release.outputs.version }}" >> release-summary.md
          echo "- Type: ${{ needs.validate-release.outputs.prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> release-summary.md
          echo "- Deployment URL: ${{ steps.deploy.outputs.deployment-url }}" >> release-summary.md
          echo "- Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> release-summary.md
          echo "- Deployed by: ${{ github.actor }}" >> release-summary.md
          echo "- Deployment Date: $(date)" >> release-summary.md
      
      - name: Upload release summary
        uses: actions/upload-artifact@v3
        with:
          name: release-summary
          path: release-summary.md
          retention-days: 30