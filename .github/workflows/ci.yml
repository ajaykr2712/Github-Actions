name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Manual trigger

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linters
        run: npm run lint
        continue-on-error: false

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm test -- --coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./dist
      
      - name: Setup deployment environment
        run: |
          echo "Setting up deployment for ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }}"
          # Add environment-specific setup commands here
      
      - name: Run pre-deployment checks
        run: |
          if [ ! -d "./dist" ]; then
            echo "Error: Build artifacts not found!"
            exit 1
          fi
          echo "Pre-deployment checks passed"
      
      - name: Deploy to environment
        id: deploy
        uses: ./.github/actions/deploy
        with:
          environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }}
          artifact-path: ./dist
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          ENV_VARS: ${{ secrets.ENV_VARS }}
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }}"
          # Add verification commands here
          curl -sSf ${{ steps.deploy.outputs.deployment-url }} > /dev/null || (echo "Deployment verification failed" && exit 1)
        continue-on-error: true

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Check deployment status
        id: check
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "::set-output name=status::success"
            echo "::set-output name=message::Deployment to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }} completed successfully"
          else
            echo "::set-output name=status::failure"
            echo "::set-output name=message::Deployment to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }} failed"
          fi
      
      - name: Send notification
        uses: ./.github/actions/notify
        with:
          status: ${{ steps.check.outputs.status }}
          message: ${{ steps.check.outputs.message }}
          environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }}
        env:
          NOTIFICATION_TOKEN: ${{ secrets.NOTIFICATION_TOKEN }}
      
      - name: Generate deployment summary
        run: |
          echo "# Deployment Summary" > deployment-summary.md
          echo "- Environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/develop' && 'dev' || 'staging') }}" >> deployment-summary.md
          echo "- Status: ${{ steps.check.outputs.status }}" >> deployment-summary.md
          echo "- Deployment URL: ${{ needs.deploy.outputs.deployment-url || 'Not available' }}" >> deployment-summary.md
          echo "- Commit: ${{ github.sha }}" >> deployment-summary.md
          echo "- Triggered by: ${{ github.actor }}" >> deployment-summary.md
      
      - name: Upload deployment summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 30