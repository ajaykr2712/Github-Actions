name: Security Scanning

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  schedule:
    # Run security scans weekly (Sunday at 00:00)
    - cron: '0 0 * * 0'
  workflow_dispatch: # Manual trigger
    inputs:
      scan-level:
        description: 'Security scan depth level'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - thorough

jobs:
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
        include:
          - node-version: 16.x
            audit-level: high
          - node-version: 18.x
            audit-level: moderate
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
      
      - name: Install dependencies
        run: npm ci
        if: steps.npm-cache.outputs.cache-hit != 'true'
      
      - name: Run npm audit
        run: npm audit --audit-level=${{ matrix.audit-level }}
        continue-on-error: true
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SCAN_LEVEL: ${{ github.event.inputs.scan-level || 'standard' }}
      
      - name: Upload vulnerability report
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report-node-${{ matrix.node-version }}
          path: snyk-*.json
          retention-days: 7
          if-no-files-found: ignore

  code-scanning:
    name: Code Security Scan
    runs-on: ubuntu-latest
    needs: dependency-check
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality
          config-file: ./.github/codeql/codeql-config.yml
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-18-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-18-
      
      - name: Install dependencies
        run: npm ci
        if: steps.npm-cache.outputs.cache-hit != 'true'
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
      
      - name: Run ESLint security rules
        run: |
          npx eslint . --config .eslintrc --ext .js,.jsx,.ts,.tsx --quiet --no-error-on-unmatched-pattern --format junit --output-file eslint-report.xml
        continue-on-error: true
      
      - name: Upload ESLint results
        uses: actions/upload-artifact@v3
        with:
          name: eslint-results
          path: eslint-report.xml
          retention-days: 7
          if-no-files-found: ignore

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    needs: code-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: |
            --debug 
            --only-verified 
            ${{ github.event.inputs.scan-level == 'thorough' && '--max-depth 100' || '' }}
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true
      
      - name: Upload secret scanning results
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-results
          path: |
            results.sarif
            gitleaks-report.json
          retention-days: 7
          if-no-files-found: ignore

  container-scanning:
    name: Container Image Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    needs: secret-scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: app:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: app:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ github.event.inputs.scan-level == 'quick' && 'CRITICAL' || 'CRITICAL,HIGH' }}
          timeout: '10m'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-security'
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  security-report:
    name: Generate Security Report
    needs: [dependency-check, code-scanning, secret-scanning, container-scanning]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./security-artifacts
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install report generation dependencies
        run: npm install -g markdown-table-formatter @cyclonedx/cdxgen
        continue-on-error: true
      
      - name: Generate SBOM
        run: cdxgen -o sbom.json
        continue-on-error: true
      
      - name: Generate comprehensive security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on $(date)" >> security-report.md
          echo "Scan level: ${{ github.event.inputs.scan-level || 'standard' }}" >> security-report.md
          echo "## Summary" >> security-report.md
          echo "This report contains findings from automated security scans." >> security-report.md
          
          # Add job status summary
          echo "### Job Status" >> security-report.md
          echo "| Job | Status |" >> security-report.md
          echo "| --- | ------ |" >> security-report.md
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> security-report.md
          echo "| Code Scanning | ${{ needs.code-scanning.result }} |" >> security-report.md
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> security-report.md
          if [[ "${{ needs.container-scanning.result }}" != "skipped" ]]; then
            echo "| Container Scanning | ${{ needs.container-scanning.result }} |" >> security-report.md
          fi
          
          echo "## Recommendations" >> security-report.md
          echo "Please review and address any identified issues based on severity." >> security-report.md
          echo "High and Critical issues should be addressed before the next release." >> security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: |
            security-report.md
            sbom.json
            ./security-artifacts/**/*
          retention-days: 30
      
      - name: Notify on critical issues
        if: ${{ failure() }}
        run: |
          echo "::warning::Security scan detected critical issues. See the security report for details."
        continue-on-error: true